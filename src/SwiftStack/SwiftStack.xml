<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SwiftStack</name>
    </assembly>
    <members>
        <member name="T:SwiftStack.ApiErrorResponse">
            <summary>
            API error response.
            </summary>
        </member>
        <member name="P:SwiftStack.ApiErrorResponse.StatusCode">
            <summary>
            Status code.
            </summary>
        </member>
        <member name="P:SwiftStack.ApiErrorResponse.Error">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:SwiftStack.ApiErrorResponse.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:SwiftStack.ApiErrorResponse.Message">
            <summary>
            User-supplied message.
            </summary>
        </member>
        <member name="P:SwiftStack.ApiErrorResponse.Data">
            <summary>
            User-supplied data.
            </summary>
        </member>
        <member name="M:SwiftStack.ApiErrorResponse.#ctor">
            <summary>
            API error response.
            </summary>
        </member>
        <member name="T:SwiftStack.ApiResultEnum">
            <summary>
            API result.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.NotFound">
            <summary>
            NotFound.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.Created">
            <summary>
            Created.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.NotAuthorized">
            <summary>
            NotAuthorized.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.InternalError">
            <summary>
            InternalError.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.SlowDown">
            <summary>
            SlowDown.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.Conflict">
            <summary>
            Conflict.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.BadRequest">
            <summary>
            BadRequest.
            </summary>
        </member>
        <member name="F:SwiftStack.ApiResultEnum.DeserializationError">
            <summary>
            DeserializationError.
            </summary>
        </member>
        <member name="T:SwiftStack.AppRequest">
            <summary>
            Application request.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Data">
            <summary>
            The deserialized request data.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Http">
            <summary>
            HTTP context.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Parameters">
            <summary>
            Parameters from the route URL.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Query">
            <summary>
            Query parameters.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Headers">
            <summary>
            Headers from the request.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Serializer">
            <summary>
            Serializer instance.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.AuthResult">
            <summary>
            Authentication and authorization result.
            </summary>
        </member>
        <member name="P:SwiftStack.AppRequest.Metadata">
            <summary>
            User-supplied metadata.
            </summary>
        </member>
        <member name="M:SwiftStack.AppRequest.#ctor(WatsonWebserver.Core.HttpContextBase,SerializationHelper.Serializer,System.Object)">
            <summary>
            Application request.
            </summary>
        </member>
        <member name="M:SwiftStack.AppRequest.GetData``1">
            <summary>
            Cast data to a specific type.
            </summary>
        </member>
        <member name="T:SwiftStack.AuthenticationResultEnum">
            <summary>
            Authentication result.
            </summary>
        </member>
        <member name="F:SwiftStack.AuthenticationResultEnum.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:SwiftStack.AuthenticationResultEnum.NotFound">
            <summary>
            Not found.
            </summary>
        </member>
        <member name="F:SwiftStack.AuthenticationResultEnum.Inactive">
            <summary>
            Inactive.
            </summary>
        </member>
        <member name="T:SwiftStack.AuthorizationResultEnum">
            <summary>
            Authorization result.
            </summary>
        </member>
        <member name="F:SwiftStack.AuthorizationResultEnum.Permitted">
            <summary>
            Permitted.
            </summary>
        </member>
        <member name="F:SwiftStack.AuthorizationResultEnum.Denied">
            <summary>
            Denied.
            </summary>
        </member>
        <member name="T:SwiftStack.AuthResult">
            <summary>
            Authentication and authorization result.
            </summary>
        </member>
        <member name="P:SwiftStack.AuthResult.AuthenticationResult">
            <summary>
            Authentication result.
            </summary>
        </member>
        <member name="P:SwiftStack.AuthResult.AuthorizationResult">
            <summary>
            Authorization result.
            </summary>
        </member>
        <member name="P:SwiftStack.AuthResult.Metadata">
            <summary>
            Metadata.
            </summary>
        </member>
        <member name="M:SwiftStack.AuthResult.#ctor">
            <summary>
            Authentication and authorization result.
            </summary>
        </member>
        <member name="T:SwiftStack.Constants">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:SwiftStack.Constants.Logo">
            <summary>
            Logo.
            Thank you https://patorjk.com/software/taag and font Small Slant.
            </summary>
        </member>
        <member name="F:SwiftStack.Constants.Copyright">
            <summary>
            Copyright.
            </summary>
        </member>
        <member name="F:SwiftStack.Constants.JsonContentType">
            <summary>
            JSON content-type.
            </summary>
        </member>
        <member name="T:SwiftStack.RequestParameters">
            <summary>
            Request parameters.
            </summary>
        </member>
        <member name="M:SwiftStack.RequestParameters.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Request parameters.
            </summary>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="P:SwiftStack.RequestParameters.Item(System.String)">
            <summary>
            Get parameter by name.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetInt(System.String,System.Int32)">
            <summary>
            Get as integer.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Integer.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetLong(System.String,System.Int64)">
            <summary>
            Get as long integer.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Long integer.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetDouble(System.String,System.Double)">
            <summary>
            Get as double.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Double.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetDecimal(System.String,System.Decimal)">
            <summary>
            Get as decimal.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Decimal.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetValueOrDefault(System.String,System.String)">
            <summary>
            Get with default value.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>String.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetBool(System.String,System.Boolean)">
            <summary>
            Get as boolean.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Get as DateTime.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetTimeSpan(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Get as TimeSpan.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetGuid(System.String,System.Nullable{System.Guid})">
            <summary>
            Get as Guid.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetEnum``1(System.String,``0,System.Boolean)">
            <summary>
            Get as enum.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
            <param name="ignoreCase">Ignore case when parsing.</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetArray(System.String,System.Char)">
            <summary>
            Get as array of strings (comma-separated).
            </summary>
            <param name="name">Name.</param>
            <param name="separator">Separator character.  Default is comma.</param>
            <returns>String array.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.GetKeys">
            <summary>
            Get all parameter keys.
            </summary>
            <returns>Keys.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.Contains(System.String)">
            <summary>
            Check if parameter exists.
            </summary>
            <param name="name">Name.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:SwiftStack.RequestParameters.TryGetValue``1(System.String,``0@)">
            <summary>
            Try to get a value as a specific type.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="name">Parameter name.</param>
            <param name="result">The result if successful.</param>
            <returns>True if the parameter exists and was successfully converted.</returns>
        </member>
        <member name="T:SwiftStack.SwiftStackApp">
            <summary>
            SwiftStack application.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.Name">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.IsRunning">
            <summary>
            Boolean to indicate if the app is running.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.LogHeader">
            <summary>
            String to prepend to log messages.  
            A space character will automatically be appended to the end if 
            the value supplied doesn't end with a space character.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.LoggingSettings">
            <summary>
            Logging settings.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.LoggingServers">
            <summary>
            Logging servers.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.Logger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.WebserverSettings">
            <summary>
            Webserver settings.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.Webserver">
            <summary>
            Webserver.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.ExceptionRoute">
            <summary>
            Exception route.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.AuthenticationRoute">
            <summary>
            Authentication route.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackApp.Serializer">
            <summary>
            JSON serializer.
            </summary>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Run(System.Threading.CancellationToken)">
            <summary>
            Run the application.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Get(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a GET route.
            </summary>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Post``1(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a POST route.
            </summary>
            <typeparam name="T">Request body type.</typeparam>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Put``1(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a PUT route.
            </summary>
            <typeparam name="T">Request body type.</typeparam>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Patch``1(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a PATCH route.
            </summary>
            <typeparam name="T">Request body type.</typeparam>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Delete(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a DELETE route.
            </summary>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Delete``1(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a DELETE route.
            </summary>
            <typeparam name="T">Request body type.</typeparam>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Head(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add a HEAD route.
            </summary>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Options(System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Add an OPTIONS route.
            </summary>
            <param name="path">Path.</param>
            <param name="handler">Route body.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackApp.Route(System.String,System.String,System.Func{SwiftStack.AppRequest,System.Threading.Tasks.Task{System.Object}},System.Type,System.Boolean)">
            <summary>
            Add a route.
            </summary>
            <param name="method">HTTP method.</param>
            <param name="path">URL path.</param>
            <param name="handler">Route body.</param>
            <param name="requestType">Request body type.</param>
            <param name="requireAuthentication">True to require authentication.</param>
        </member>
        <member name="T:SwiftStack.SwiftStackException">
            <summary>
            SwiftStack exception.
            </summary>
        </member>
        <member name="P:SwiftStack.SwiftStackException.Result">
            <summary>
            Result.
            </summary>
        </member>
        <member name="M:SwiftStack.SwiftStackException.#ctor(SwiftStack.ApiResultEnum)">
            <summary>
            SwiftStack exception.
            </summary>
            <param name="result">Result.</param>
        </member>
        <member name="M:SwiftStack.SwiftStackException.#ctor(SwiftStack.ApiResultEnum,System.String)">
            <summary>
            SwiftStack exception.
            </summary>
            <param name="result">Result.</param>
            <param name="message">Message.</param>
        </member>
    </members>
</doc>
